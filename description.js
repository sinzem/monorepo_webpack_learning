// Инициализируемся - npm init -y

// Создаем папки packages(пакеты, переиспользуемые элементы приложений) и services(для микросервисов - shop, admin и host - микрофронты - по сути, отдельные приложения, которые могут работать сами по себе, но вконце соберем в одно приложение)

// В package.json удаляем все лишнее(оставил name и version), добавляем ключ workspaces, в который вносим массив с папками(packages/* и services/* ) - это будут рабочие области наподобие npm-пакетов

// В packages создаем build-config и закидываем в него папку(src) с конфигурациями из туториала по Webpack - настройка webpack, babel, сборка их и типизация, создаем внутри сборочный файл(index.ts). Запускаем терминал отдельно для этой папки(build-config), инициализируем(npm init -y), в package.json главным файлом устанавливаем index.ts, также в package.json переносим зависимости для разработки(devDependencies) из туториала по Webpack, но установку(npm i) запускаем из корневой папки - несмотря на то, что в ней отдельный package.json, установятся все зависимости в корневую папку, на весь проект получится общий node_modules
// В build-config cоздаем tsconfig.json, тоже копируем настройки из туториала по Webpack

// Точно также в папке shared создаем src/index.ts, делаем функцию для примера использования, инициализируем shared и создаем tsconfig.json(копируем из build-config)

// Точно так же в папке host создаем src/index.ts, инициализируем host(инициализации в разных терминалах - на д.м открыто 4 терминала), в package.json удаляем все лишнее и в зависимости(dependencies) подключаем workspaces, с которыми будем работать - shared и build-config из packages, в качестве версий ставим звездочку - любая - это позволит работать с воркспейсами, как с npm-пакетами, также из туториала по Webpack копируем tsconfig.json

// В host/src/index.js примеры работы с подключенными воркспейсами - при импорте функций сразу выдает подсказки с воркспейсами

// Переносим в services/host структуру из туториала по Webpack - папки public и src, в package.json копируем скрипты запуска и react-зависимости, также копируем webpack.config.ts. В App.tsx прописываем тестовое приветствие и запускаем проект(npm run start из папки host - выдало нехватку одной зависимости, после установки и перезапуска все заработало)

// Копируем содержимое папки host в admin и shop, в каждом в package.json меняем название проекта на соответствующее. По-сути это получатся три отдельных приложения, которые соберем в одно. Соответственно, редактируем наполнение каждого приложения(у админа удаляем страницу shop, в магазине удаляем страницу about, в host удаляем обе и подключаем из admin и shop)

// В admin и shop создаем папку router с соответствующим документом, из документа index.tsx выносим весь функционал в bootstrap.tsx, оставляем только пустой экспорт для дальнейшего переподключения. Создание роутера выносим из bootstrap.tsx в Router.tsx. Подробнее описано в этих документах. Также построение путей вынесли в shared/routes, по месту назначения подключили через импорты


// Основная настройка подключения микрофронтов происходит в webpack.config.ts каждого в плагине new webpack.container.ModuleFederationPlugin - подробнее в этих документах

// В tsconfig каждого микрофронта находится почти одинаковый код, поэтому выносим повторяющийся в корень package(tsconfig.base.json), в микрофронтах удаляем эти строки(оставили имена и настройку путей) и добавляем наследование(extends) от базового

// Все микрофронты должны быть запущены для работы приложения
    // - открываем на каждый отдельный терминал(смотрим, чтобы в webpack.config каждого были разныуе порты) и npm run start(или build и т.п)
    // - можно запускать из корневой директории - npm run start -w admin - буквой -w обозначаем работу с воркспейсом и добавляем имя нужного - удобно, когда работаем с одним микрофронтом
    // - можно настроить запуск нужных воркспейсов одной командой с помощью плагинов, например npmjs.com/package/concurrently 
